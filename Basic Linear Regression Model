{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMl0CfeEd10Qi0tJpBfPghG",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sriram4111/My-ML/blob/main/Basic%20Linear%20Regression%20Model\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "O36-XWNoV5Pc"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import seaborn as sns"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"/content/Exp_Sal.csv\")"
      ],
      "metadata": {
        "id": "iW7Pn7-_WH6x"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "R-TNOLqPYLgw",
        "outputId": "8f02d5e9-ad36-4a6c-953f-8d3297d2057e"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Experience  Salary\n",
              "0         1.2   20000\n",
              "1         1.5   21000\n",
              "2         2.0   30000\n",
              "3         3.0   50000\n",
              "4         4.0   60000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b6ef4d3e-c434-4135-81e9-5447db0bcedd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Experience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.2</td>\n",
              "      <td>20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.5</td>\n",
              "      <td>21000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "      <td>30000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "      <td>50000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "      <td>60000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b6ef4d3e-c434-4135-81e9-5447db0bcedd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b6ef4d3e-c434-4135-81e9-5447db0bcedd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b6ef4d3e-c434-4135-81e9-5447db0bcedd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b9a393fc-a564-402e-9e34-ae831ed11b0d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b9a393fc-a564-402e-9e34-ae831ed11b0d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b9a393fc-a564-402e-9e34-ae831ed11b0d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6863854277945056,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          1.2,\n          8.0,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 62269,\n        \"min\": 20000,\n        \"max\": 340000,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          20000,\n          95000,\n          28000\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y9F6XviUYNaJ",
        "outputId": "976f0948-f73c-480d-a23f-3c4688d9d9b2"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(25, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#I want to plot my data\n",
        "plt.scatter(df['Experience'],df['Salary'])\n",
        "plt.title(\"Exp Vs Sal\")\n",
        "plt.xlabel(\"Experience\")\n",
        "plt.ylabel(\"Salary\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "YMPD8N5wYQzA",
        "outputId": "023328d3-6408-4093-e1fd-1fcd45599b2f"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Salary')"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#correlation btw my dependent and independent feature\n",
        "df.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "elhFAWj4YUX3",
        "outputId": "67ad3c74-76e4-4541-c841-a8c32c674756"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Experience    Salary\n",
              "Experience    1.000000  0.172216\n",
              "Salary        0.172216  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8b2ea24a-d30c-4440-bd92-ba46b3f66560\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Experience</th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Experience</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.172216</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Salary</th>\n",
              "      <td>0.172216</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8b2ea24a-d30c-4440-bd92-ba46b3f66560')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8b2ea24a-d30c-4440-bd92-ba46b3f66560 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8b2ea24a-d30c-4440-bd92-ba46b3f66560');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8a3713a0-d9b9-4a73-8041-aca0cbbdc03b\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8a3713a0-d9b9-4a73-8041-aca0cbbdc03b')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8a3713a0-d9b9-4a73-8041-aca0cbbdc03b button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5853315649463969,\n        \"min\": 0.1722161623677374,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.1722161623677374,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Salary\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5853315649463969,\n        \"min\": 0.1722161623677374,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1.0,\n          0.1722161623677374\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plot correlation in data visualization\n",
        "sns.pairplot(df)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 530
        },
        "id": "PnZgpkPLZbMF",
        "outputId": "ffdbef02-d3d7-4a26-9452-f40f9bceb5a5"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.PairGrid at 0x7a67ad111ea0>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 6 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X = df[['Experience']]\n",
        "X"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 833
        },
        "id": "wqDcNgQJZq5B",
        "outputId": "367e060b-9836-4035-9449-cd639920191c"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    Experience\n",
              "0          1.2\n",
              "1          1.5\n",
              "2          2.0\n",
              "3          3.0\n",
              "4          4.0\n",
              "5          2.3\n",
              "6          4.0\n",
              "7          3.4\n",
              "8          5.0\n",
              "9          5.5\n",
              "10         6.0\n",
              "11         4.5\n",
              "12         1.0\n",
              "13        10.0\n",
              "14         8.0\n",
              "15         6.5\n",
              "16         5.3\n",
              "17         3.3\n",
              "18         4.3\n",
              "19         7.5\n",
              "20         8.0\n",
              "21         9.0\n",
              "22         6.8\n",
              "23         7.4\n",
              "24        10.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d512a9c-a608-48d2-bbd4-9849f3beff58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Experience</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>4.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>3.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>5.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>5.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>6.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>4.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>6.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>5.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>3.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>4.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>7.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>8.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>9.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>6.8</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>7.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>10.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d512a9c-a608-48d2-bbd4-9849f3beff58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3d512a9c-a608-48d2-bbd4-9849f3beff58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3d512a9c-a608-48d2-bbd4-9849f3beff58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4306dc91-117c-4a6a-adc9-990f4d9a27b9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4306dc91-117c-4a6a-adc9-990f4d9a27b9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4306dc91-117c-4a6a-adc9-990f4d9a27b9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_f5e63db4-780c-4d56-8bc5-37f05ce498ed\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_f5e63db4-780c-4d56-8bc5-37f05ce498ed button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('X');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "X",
              "summary": "{\n  \"name\": \"X\",\n  \"rows\": 25,\n  \"fields\": [\n    {\n      \"column\": \"Experience\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.6863854277945056,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          1.2,\n          8.0,\n          5.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Y = df['Salary']\n",
        "Y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 868
        },
        "id": "DpYke878aMl5",
        "outputId": "20a98c42-d3ca-4c41-f885-5e0a92ed93a5"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0      20000\n",
              "1      21000\n",
              "2      30000\n",
              "3      50000\n",
              "4      60000\n",
              "5     340000\n",
              "6      45000\n",
              "7      35000\n",
              "8      62000\n",
              "9      60000\n",
              "10     70000\n",
              "11     52000\n",
              "12     22000\n",
              "13    100000\n",
              "14     90000\n",
              "15     60000\n",
              "16     40000\n",
              "17     28000\n",
              "18     30000\n",
              "19     50000\n",
              "20     86000\n",
              "21     95000\n",
              "22     72000\n",
              "23     77000\n",
              "24    110000\n",
              "Name: Salary, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Salary</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>20000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>21000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>30000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>50000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>60000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>340000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>45000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>35000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>62000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>60000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>70000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>52000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>22000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>90000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>60000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>40000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>28000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>30000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>50000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>86000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>95000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>72000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>77000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>110000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Train and Test Data\n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "U0DijtlCaUai"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)"
      ],
      "metadata": {
        "id": "-1_AOxvSagWt"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Standardization\n",
        "from sklearn.preprocessing import StandardScaler"
      ],
      "metadata": {
        "id": "Pu8Bf7u1bFaq"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()"
      ],
      "metadata": {
        "id": "DHAa0CEsbWta"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train = scaler.fit_transform(X_train)"
      ],
      "metadata": {
        "id": "kkuRHNmsbb8w"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7r9Au1lVbkgC",
        "outputId": "20bd4179-92b3-4a0d-8cc9-420c2c829a78"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[ 0.07082497],\n",
              "       [ 1.70524736],\n",
              "       [-1.38199493],\n",
              "       [ 0.54299144],\n",
              "       [-1.09143095],\n",
              "       [-1.20039245],\n",
              "       [-1.56359742],\n",
              "       [ 0.43402995],\n",
              "       [-0.83718747],\n",
              "       [-0.47398249],\n",
              "       [ 0.97883741],\n",
              "       [-0.72822598],\n",
              "       [ 1.34204239],\n",
              "       [-0.365021  ],\n",
              "       [ 1.70524736],\n",
              "       [-0.69190548],\n",
              "       [ 0.25242746],\n",
              "       [ 0.97883741],\n",
              "       [ 0.79723492],\n",
              "       [-0.47398249]])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "X_test =  scaler.transform(X_test)\n"
      ],
      "metadata": {
        "id": "a7DLEjaebnYg"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_test"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "em9wazB6bvcZ",
        "outputId": "6912161b-5814-45ee-c13f-525b0a5cee48"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.11077752],\n",
              "       [-0.00181602],\n",
              "       [-1.49095643],\n",
              "       [ 0.76091443],\n",
              "       [-0.29238001]])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Apply my Linear Regression\n",
        "from sklearn.linear_model import LinearRegression"
      ],
      "metadata": {
        "id": "nksvgtYkbwc9"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "regression  = LinearRegression(n_jobs=-1)"
      ],
      "metadata": {
        "id": "a4nXJ56Bb9Xm"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#train my model\n",
        "\n",
        "regression.fit(X_train,Y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "k1S3Kc9OcA85",
        "outputId": "765bfff0-8b2e-43ab-bacd-1afa111d3464"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression(n_jobs=-1)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression(n_jobs=-1)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression(n_jobs=-1)</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#To get coefficent\n",
        "regression.coef_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ofwYQYL9clWP",
        "outputId": "8a15c37e-a527-4092-fdbb-2ae180d1ac14"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([8354.25926055])"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#To get Intercept\n",
        "regression.intercept_"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fYT1yQH-clDo",
        "outputId": "1a7994ef-ed0b-4c56-a173-3e81a59c638b"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "72700.0"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#plot my data to create best fit line\n",
        "\n",
        "plt.scatter(X_train,Y_train,color=\"Blue\",label=\"Real_Data\")\n",
        "plt.scatter(X_train,regression.predict(X_train),color=\"red\",label=\"Predicted_Data\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "SHyGHEo6cLM3",
        "outputId": "1bb206c9-6f8e-406a-be52-6a01c5d8390a"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7a67a34232b0>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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0UeWmppqS5cutf3799vq1astJSXFNm7c6NSsXbvWvF6vFRUV2b59+2zevHmWnp4eNhrtnnvuscGDB9vmzZtt586d5vf7ze/3t3t7GTUGAED3E8nxO6IgJKnV6dlnnzUzs8OHD9uUKVOsb9++5vV6beTIkbZ06dIWDfn4449txowZ1qtXL+vXr5/df//9dubMmbCakpISmzBhgnk8Hhs+fLjzGWd78sknbfDgwebxeGzSpEm2ffv2sOWnTp2y+fPnW58+fSw1NdVuvvlmq6qqavf2EoQAAOh+Ijl+J5mZddXZqHgXCASUlpamuro6+gsBANBNRHL85lljAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtQhCAADAtSIKQoWFhfrGN76hyy67TAMGDNCsWbN04MCBsJrTp09rwYIFuvzyy9W7d2/dcsstqqmpCas5fPiw8vPzlZqaqgEDBmjp0qVqbGwMqyktLdW1114rr9erkSNHqqioqEV7Vq9eraFDh6pnz57KycnRu+++G3FbAACAe0UUhLZs2aIFCxZo+/bt2rRpk86cOaNp06bpq6++cmruu+8+vf7661q3bp22bNmio0ePqqCgwFkeDAaVn5+vhoYGbdu2Tc8995yKioq0YsUKp6ayslL5+fm66aabVFFRocWLF+vOO+/UW2+95dS88MILWrJkiVauXKn33ntP48ePV15eno4dO9butgAAAJezDjh27JhJsi1btpiZWW1trfXo0cPWrVvn1Ozfv98kWVlZmZmZbdiwwZKTk626utqpefrpp83n81l9fb2ZmS1btszGjBkT9lmzZ8+2vLw85/WkSZNswYIFzutgMGhZWVlWWFjY7rZcSF1dnUmyurq6dtUDAICuF8nxu0N9hOrq6iRJffv2lSSVl5fr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L7/8UkuXLtX27dv18ccfq7i4WDNnztTIkSOVl5cnSfr617+u6dOn66677tK7776rd955RwsXLtStt96qrKwsSdJtt90mj8ejO+64Q3v37tULL7ygJ554QkuWLHHasWjRIm3cuFH/+Z//qQ8++EA///nPtXPnTi1cuFCSlJSUpMWLF+vf//3f9T//8z/as2eP/u3f/k1ZWVmaNWtWB3cbAABICJEOSSspKTFJLaa5c+fayZMnbdq0ada/f3/r0aOHDRkyxO666y6rrq4OW8fx48dtzpw51rt3b/P5fPbDH/7QTpw4EVbzt7/9zf75n//ZvF6vXXHFFfbwww+3aMuLL75oV155pXk8HhszZoz98Y9/DFve1NRkP/vZzywjI8O8Xq9NnTrVDhw40O5tZfg8AADdTyTH7yQzsy7MYXEtEAgoLS1NdXV1XCYDAKCbiOT4zbPGAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAaxGEAACAa13S1Q0AAADuEwxKf/mLVFUlDRwoTZ4spaTEvh0EIQAAEFPr10uLFkmffvqPeYMGSU88IRUUxLYtXBoDAAAxs3699N3vhocgSfrss9D89etj2x6CEAAAiIlgMHQmyKzlsuZ5ixeH6mKFIAQAAGLiL39peSbobGbSkSOhulghCAEAgJioqurcus5AEAIAADExcGDn1nUGghAAAIiJyZNDo8OSklpfnpQkZWeH6mKFIAQAAGIiJSU0RF5qGYaaXz/+eGzvJ0QQAgAAMVNQIL30knTFFeHzBw0KzY/1fYS4oSIAAIipggLp//wf6amnpEOHpBEjpPnzJY8n9m2J+IzQ1q1b9Z3vfEdZWVlKSkrSq6++GrbczLRixQoNHDhQvXr1Um5urj788MOwms8//1y33367fD6f0tPTdccdd+jLL78Mq9m9e7cmT56snj17Kjs7W6tWrWrRlnXr1mn06NHq2bOnxo0bpw0bNkTcFgAAEFvr14fCz333Sb/5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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#predict my data by giving new data\n",
        "y_pred = regression.predict(X_test)"
      ],
      "metadata": {
        "id": "kbtQI_mjcdfn"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1zGwOE1-dd7m",
        "outputId": "bfa507f5-1c44-4142-ca09-c75b287e203a"
      },
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[71774.5358965  72684.82845732 60244.16345941 79056.87638308\n",
            " 70257.38162846]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "regression.predict(scaler.transform([[10]]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "i4FU08a1dfwD",
        "outputId": "1d257b45-c102-4a18-9278-167015657cd3"
      },
      "execution_count": 61,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/base.py:493: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([86946.07857687])"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#I want to know how accurate my model is performing i use performance metrics\n",
        "from sklearn.metrics import mean_absolute_error, mean_squared_error\n"
      ],
      "metadata": {
        "id": "SHMIcU8ed11M"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mse = mean_squared_error(Y_test,y_pred)\n",
        "mae = mean_absolute_error(Y_test,y_pred)\n",
        "rmse = np.sqrt(mse)"
      ],
      "metadata": {
        "id": "MiYAYhBge3GA"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(mse)\n",
        "print(mae)\n",
        "print(rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ajlBYKUgfKe4",
        "outputId": "1b5f5127-129a-4f24-c7f3-040b70b2d86d"
      },
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "624198996.0413654\n",
            "20603.557164953385\n",
            "24983.974784676786\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Rsquare\n",
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "HDljBqc4fbY5"
      },
      "execution_count": 69,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "score = r2_score(Y_test,y_pred)\n",
        "score"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "npQGeNEBfj19",
        "outputId": "f323a19b-b775-4c68-fdcc-0055f326664c"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.6629342392406368"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Adjusted Rsquare\n",
        "1-(1-score)*(len(Y_test-1)/(len(Y_test-1))-(X_test.shape[-1]-1))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "R4_p6Dbwfrxf",
        "outputId": "f2495bb7-9338-4b86-e649-cd01e5348a03"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-0.6629342392406368"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#By using OLS Linear Regression\n",
        "\n",
        "import statsmodels.api as sm\n",
        "model = sm.OLS(Y_train,X_train).fit()"
      ],
      "metadata": {
        "id": "UUCQHIgIg7j5"
      },
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred = model.predict(X_test)"
      ],
      "metadata": {
        "id": "NYw1-9dDhc_3"
      },
      "execution_count": 79,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(pred)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fauI9DSrhkTS",
        "outputId": "4d87ea49-e67b-4642-ee89-96f7931ad003"
      },
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[  -925.4641035     -15.17154268 -12455.83654059   6356.87638308\n",
            "  -2442.61837154]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(model.summary())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "llEF-rWNhpRw",
        "outputId": "566e074b-fa9e-45ae-eaf0-11f8190bf783"
      },
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                 OLS Regression Results                                \n",
            "=======================================================================================\n",
            "Dep. Variable:                 Salary   R-squared (uncentered):                   0.007\n",
            "Model:                            OLS   Adj. R-squared (uncentered):             -0.045\n",
            "Method:                 Least Squares   F-statistic:                             0.1371\n",
            "Date:                Wed, 09 Oct 2024   Prob (F-statistic):                       0.715\n",
            "Time:                        13:48:24   Log-Likelihood:                         -258.31\n",
            "No. Observations:                  20   AIC:                                      518.6\n",
            "Df Residuals:                      19   BIC:                                      519.6\n",
            "Df Model:                           1                                                  \n",
            "Covariance Type:            nonrobust                                                  \n",
            "==============================================================================\n",
            "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------\n",
            "x1          8354.2593   2.26e+04      0.370      0.715   -3.89e+04    5.56e+04\n",
            "==============================================================================\n",
            "Omnibus:                       45.103   Durbin-Watson:                   1.017\n",
            "Prob(Omnibus):                  0.000   Jarque-Bera (JB):              166.488\n",
            "Skew:                           3.575   Prob(JB):                     7.04e-37\n",
            "Kurtosis:                      15.193   Cond. No.                         1.00\n",
            "==============================================================================\n",
            "\n",
            "Notes:\n",
            "[1] R² is computed without centering (uncentered) since the model does not contain a constant.\n",
            "[2] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "418AWSpbhwda"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}